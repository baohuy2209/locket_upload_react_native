@echo off
setlocal enabledelayedexpansion

:: L·∫•y version t·ª´ package.json
for /f "delims=" %%i in ('node -p "require('./package.json').version"') do set VERSION=%%i

:: L·∫•y th·ªùi gian hi·ªán t·∫°i
for /f %%i in ('powershell -Command "Get-Date -Format yyyyMMdd_HHmm"') do set CURRENT_TIME=%%i

:: L·∫•y commit g·∫ßn nh·∫•t c√≥ ch·ª©a t·ª´ kh√≥a "Build and release APK version"
for /f %%i in ('git log --grep "Build and release APK version" --pretty^=format:"%%H" -1') do set PREV_COMMIT=%%i

:: L·∫•y version t·ª´ message c·ªßa commit tr∆∞·ªõc
set PREV_VERSION=
if defined PREV_COMMIT (
  for /f "delims=" %%i in ('git log -1 --format=%%s !PREV_COMMIT! ^| findstr /r "[0-9]\+\.[0-9]\+\.[0-9]\+"') do set PREV_VERSION=%%i
)

:: T·∫°o changelog
set CHANGELOG=
if defined PREV_COMMIT (
  for /f "delims=" %%i in ('git log --pretty^=format:"- %%s" !PREV_COMMIT!^..HEAD --no-merges ^| findstr /v /i "Build and release APK version" ^| findstr /v /i "script deploy" ^| findstr /v /i "update readme"') do (
    set "CHANGELOG=!CHANGELOG!%%i\r\n"
  )
)

:: Build APK
cd android
call gradlew.bat assembleRelease
if errorlevel 1 (
  echo ‚ùå L·ªói: Build APK th·∫•t b·∫°i!
  exit /b 1
)
cd ..

:: ƒê·ªïi t√™n file APK
set APK_PATH=android\app\build\outputs\apk\release\app-release.apk
set NEW_APK_PATH=android\app\build\outputs\apk\release\locket_upload_%CURRENT_TIME%.apk

if not exist "%APK_PATH%" (
  echo ‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file APK!
  exit /b 1
)

move "%APK_PATH%" "%NEW_APK_PATH%"

:: C√†i APK l√™n thi·∫øt b·ªã (n·∫øu c√≥)
adb install "%NEW_APK_PATH%"
if errorlevel 1 (
  echo ‚ö†Ô∏è  C·∫£nh b√°o: C√†i ƒë·∫∑t APK th·∫•t b·∫°i, nh∆∞ng v·∫´n ti·∫øp t·ª•c...
)

:: Commit v√† push
git add .
git commit -m "Build and release APK version %VERSION% on %CURRENT_TIME%"
if errorlevel 1 (
  echo ‚ùå L·ªói: Commit Git th·∫•t b·∫°i!
  exit /b 1
)
git push origin main
if errorlevel 1 (
  echo ‚ùå L·ªói: Push Git th·∫•t b·∫°i!
  exit /b 1
)

:: T·∫°o ho·∫∑c c·∫≠p nh·∫≠t release GitHub
set RELEASE_NOTES=Release version %VERSION%^&echo.^&echo.Changelog:^&echo.%CHANGELOG%

:: Ki·ªÉm tra xem release ƒë√£ t·ªìn t·∫°i ch∆∞a
for /f "delims=" %%i in ('gh release view "v%VERSION%" --json id -q ".id" 2^>nul') do set RELEASE_ID=%%i

if not defined RELEASE_ID (
  echo ‚ûï T·∫°o release m·ªõi tr√™n GitHub...
  gh release create "v%VERSION%" "%NEW_APK_PATH%" --notes "%RELEASE_NOTES%"
  if errorlevel 1 (
    echo ‚ùå L·ªói: T·∫°o release GitHub th·∫•t b·∫°i!
    exit /b 1
  )
) else (
  echo üîÅ C·∫≠p nh·∫≠t release ƒë√£ t·ªìn t·∫°i...
  gh release update "v%VERSION%" --notes "%RELEASE_NOTES%"
  gh release upload "v%VERSION%" "%NEW_APK_PATH%" --clobber
)

:: H·ªèi g·ª≠i FCM
set /p SEND_FCM="B·∫°n c√≥ mu·ªën g·ª≠i th√¥ng b√°o qua FCM kh√¥ng? (y/n): "
if /i "%SEND_FCM%"=="y" (
  for /f "delims=" %%i in ('node -p "require('./google-services.json').project_info.project_id"') do set PROJECT_ID=%%i
  for /f "delims=" %%i in ('gcloud auth application-default print-access-token') do set ACCESS_TOKEN=%%i
  set FCM_URL=https://fcm.googleapis.com/v1/projects/%PROJECT_ID%/messages:send

  echo üîî G·ª≠i th√¥ng b√°o FCM...

  curl -X POST "%FCM_URL%" ^
       -H "Authorization: Bearer %ACCESS_TOKEN%" ^
       -H "Content-Type: application/json" ^
       -d "{^
         \"message\": {^
           \"android\": {^
             \"restricted_package_name\": \"com.locket_upload\"^
           },^
           \"data\": {^
             \"update_url\": \"https://github.com/quockhanh2004/locket_upload_react_native/releases\"^
           },^
           \"notification\": {^
             \"body\": \"C·∫ßn c·∫≠p nh·∫≠t qua apk, nh·∫•n v√†o ƒë·ªÉ ki·ªÉm tra nh√©!\",^
             \"title\": \"ƒê√£ c√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi!\"^
           },^
           \"topic\": \"new_update\"^
         }^
       }"

  if errorlevel 1 (
    echo ‚ùå L·ªói: G·ª≠i th√¥ng b√°o FCM th·∫•t b·∫°i!
    exit /b 1
  )
  echo ‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o FCM th√†nh c√¥ng!
) else (
  echo üö´ B·ªè qua vi·ªác g·ª≠i th√¥ng b√°o FCM.
)

echo üéâ Build ho√†n t·∫•t th√†nh c√¥ng!
pause
